# Use the official Rust Image as the base image for building the application
from rust:1.86.0-bullseye as builder

# Set the working directory
workdir /app

# Copy the Cargo.toml and Cargo.lock files to the container
copy ../backend/Cargo.toml ./

# Fetch the dependencies
run cargo fetch

# Copy the source code to the container
copy ./backend/src ./src

# Build the Rust application in release mode
run cargo build --release

# The final stage: create a small image containing only compiled binary
# Runtime stage
from debian:bullseye-slim

# when establishing HTTPS connections
run apt-get update -y \
    && apt-get install -y --no-install-recommends openssl ca-certificates \
    # Clean up
    && apt-get autoremove -y \
    && apt-get clean -y \
    && rm -rf /var/lib/apt/lists/*


# create a user group 'app_group'
run addgroup -gid 1000 app_group

# create a user under 'app_group'
run useradd -r -g app_group -ms /bin/bash app_user

# switch to app_user
user app_user

# Set the working directory
workdir /app

run chown -R app_user:app_group /app

# Copy the compiled binary from the build stage to the container
copy --from=builder /app/target/release/backend /usr/local/bin/
copy --from=builder /app/target/release/generate_sitemap /usr/local/bin/
copy --from=builder /app/target/release/create_user /usr/local/bin/
copy ./backend/src/configuration ./src/configuration

# create a upload directory
run mkdir /app/uploads
run mkdir /app/uploads/images

run mkdir /app/logs/

env APP_ENVIRONMENT production

# Expose the port on which your application will run
expose 8081

# Set the entry point to the complied binary
cmd ["backend"]
